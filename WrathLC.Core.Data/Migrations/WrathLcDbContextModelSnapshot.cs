// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WrathLc.Core.ResourceAccess;

#nullable disable

namespace WrathLc.Core.ResourceAccess.Migrations
{
    [DbContext(typeof(WrathLcDbContext))]
    partial class WrathLcDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WrathLc.Core.ResourceAccess.Entities.DiscordServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ServerId")
                        .IsUnique();

                    b.ToTable("DiscordServers");
                });

            modelBuilder.Entity("WrathLc.Core.ResourceAccess.Entities.DiscordServerUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DiscordServerId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiscordServerId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("UserId"), "hash");

                    b.ToTable("DiscordServerUsers");
                });

            modelBuilder.Entity("WrathLc.Core.ResourceAccess.Entities.Guild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DiscordServerId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DiscordServerId")
                        .IsUnique();

                    b.HasIndex("IsDeleted");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("WrathLc.Core.ResourceAccess.Entities.GuildUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuildId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("UserId"), "hash");

                    b.ToTable("GuildUsers");
                });

            modelBuilder.Entity("WrathLc.Core.ResourceAccess.Entities.DiscordServerUser", b =>
                {
                    b.HasOne("WrathLc.Core.ResourceAccess.Entities.DiscordServer", "DiscordServer")
                        .WithMany("Users")
                        .HasForeignKey("DiscordServerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DiscordServer");
                });

            modelBuilder.Entity("WrathLc.Core.ResourceAccess.Entities.Guild", b =>
                {
                    b.HasOne("WrathLc.Core.ResourceAccess.Entities.DiscordServer", "DiscordServer")
                        .WithOne("Guild")
                        .HasForeignKey("WrathLc.Core.ResourceAccess.Entities.Guild", "DiscordServerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DiscordServer");
                });

            modelBuilder.Entity("WrathLc.Core.ResourceAccess.Entities.GuildUser", b =>
                {
                    b.HasOne("WrathLc.Core.ResourceAccess.Entities.Guild", "Guild")
                        .WithMany("GuildUsers")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("WrathLc.Core.ResourceAccess.Entities.DiscordServer", b =>
                {
                    b.Navigation("Guild");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WrathLc.Core.ResourceAccess.Entities.Guild", b =>
                {
                    b.Navigation("GuildUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
